name: Build and Publish NPM Package
on:
  push:
    tags:
      - 'v*' # Trigger on version tags
  workflow_dispatch: # Allow manual triggering

jobs:
  build-native:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32
          - os: macos-latest
            platform: darwin
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x' # Updated to a more recent LTS version
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          
      - name: Install node-bindgen CLI
        run: cargo install nj-cli
        
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Ensure Xcode command line tools are installed
          xcode-select --install || true
          
      - name: Change to js-binding directory
        run: cd js-binding
        
      - name: Install npm dependencies
        working-directory: ./js-binding
        run: npm ci || npm install
        
      - name: Build with node-bindgen
        working-directory: ./js-binding
        run: nj-cli build --release
        
      - name: Create platform directory
        run: |
          mkdir -p js-binding/dist/${{ matrix.platform }}
          
      - name: Copy binary to platform directory
        shell: bash
        run: |
          cd js-binding
          # Look for the built binary in common locations
          if [ -f "dist/index.node" ]; then
            cp dist/index.node dist/${{ matrix.platform }}/
            echo "Found binary at dist/index.node"
          elif [ -f "native/index.node" ]; then
            cp native/index.node dist/${{ matrix.platform }}/
            echo "Found binary at native/index.node"
          elif [ -f "target/release/index.node" ]; then
            cp target/release/index.node dist/${{ matrix.platform }}/
            echo "Found binary at target/release/index.node"
          else
            echo "Could not find .node file"
            echo "Searching for .node files:"
            find . -name "*.node" -type f
            exit 1
          fi
          
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-binary
          path: js-binding/dist/${{ matrix.platform }}/

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown
          
      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          
      - name: Build WASM package
        working-directory: ./core-logic
        run: |
          wasm-pack build --target nodejs --out-dir ../js-binding/dist/wasm
          
      - name: Create WASM directory structure
        run: |
          mkdir -p js-binding/dist/wasm
          # Copy generated files if they're in a different location
          if [ -d "core-logic/pkg" ]; then
            cp -r core-logic/pkg/* js-binding/dist/wasm/ || true
          fi
          
      - name: Upload WASM binary
        uses: actions/upload-artifact@v4
        with:
          name: wasm-binary
          path: js-binding/dist/wasm/

  publish:
    name: Publish Package
    needs: [build-native, build-wasm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Download all platform binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Organize binaries
        run: |
          cd js-binding
          
          # Create platform directories
          mkdir -p dist/linux
          mkdir -p dist/win32
          mkdir -p dist/darwin
          mkdir -p dist/wasm
          
          # Move files from the artifact directories to the appropriate platform directories
          cp -r ../artifacts/linux-binary/* dist/linux/ || echo "No Linux binary found"
          cp -r ../artifacts/win32-binary/* dist/win32/ || echo "No Windows binary found"
          cp -r ../artifacts/darwin-binary/* dist/darwin/ || echo "No macOS binary found"
          cp -r ../artifacts/wasm-binary/* dist/wasm/ || echo "No WASM binary found"
          
          # List final structure
          echo "Final dist structure:"
          find dist -type f
          
      - name: Install dependencies for publishing
        working-directory: ./js-binding
        run: npm ci || npm install
        
      - name: Publish to NPM
        working-directory: ./js-binding
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}